{"ast":null,"code":"var _jsxFileName = \"/home/diego/Documentos/henry/PI/videogames/videogames_pi/client/src/components/cards/Cards.jsx\",\n  _s = $RefreshSig$();\n// import Nav from '../nav/Nav';\n// import Card from '../card/Card';\n// import style from './cards.module.css';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { getAllVideogames, updateRenderArray } from '../../redux/actions';\n\n// const Cards = () => {\n\n//   const dispatch = useDispatch();\n//   const allVideogamesArray = useSelector(state => state.allVideogamesArray);\n//   const toRenderArray = useSelector(state => state.toRenderArray);\n//   const [searchArray, setSearchArray] = useState([]);\n\n//   useEffect(() => {\n//     dispatch(getAllVideogames());\n//   }, []);\n\n//   const onSearch = async (name) => {\n//     try {\n//       const response = await axios(`http://localhost:3001/videogames/search/?name=${name}`);\n//       const data = response.data;\n//       console.log(data)\n\n//       if (!data.length) {\n//         window.alert('Try another name!');\n//       } else {\n//         setSearchArray(data);\n//         dispatch(updateRenderArray(data));\n//       }\n//     } catch (error) {\n//       console.error('Error fetching search results:', error);\n//     }\n//   };\n\n//   return (\n//     <main className={style.main}>\n//       <Nav onSearch={onSearch} />\n\n//       <section className={style.cards}>\n//       {(toRenderArray.length ? toRenderArray : allVideogamesArray).map(({ id, name, genres, background_image,image }) => (\n//           <div className={style.card} key={id}>\n//             <Card\n//               id={id}\n//               name={name}\n//               genres={genres}\n//               image={background_image || image}\n//             />\n//           </div>\n//         ))}\n//       </section>\n\n//       <section className={style.paginado}>\n//         <p> ⇤ ← 1 2 3 4 5 → ⇥</p>\n//       </section>\n//     </main>\n//   );\n// };\n\n// export default Cards;\nimport React, { useState, useEffect } from 'react';\nimport Card from '../card/Card';\nimport style from './cards.module.css';\nimport axios from 'axios';\nimport Nav from '../nav/Nav';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllVideogames, updateRenderArray } from '../../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // 3. Agrega estados para almacenar las opciones seleccionadas en Nav.jsx\n  const [selectedSortOption, setSelectedSortOption] = useState('');\n  const [selectedDataSource, setSelectedDataSource] = useState('');\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  useEffect(() => {\n    // 4. Aplica los filtros y el ordenamiento al arreglo de cards\n    let updatedCards = [...cards];\n\n    // Filtrar por origen\n    if (selectedDataSource === 'API') {\n      updatedCards = updatedCards.filter(card => !card.isDB);\n    } else if (selectedDataSource === 'DB') {\n      updatedCards = updatedCards.filter(card => card.isDB);\n    }\n\n    // Filtrar por género\n    if (selectedGenres.length > 0) {\n      updatedCards = updatedCards.filter(card => card.genres.some(genre => selectedGenres.includes(genre)));\n    }\n\n    // Ordenar\n    if (selectedSortOption === 'RatingD') {\n      updatedCards.sort((a, b) => b.rating - a.rating);\n    } else if (selectedSortOption === 'RatingA') {\n      updatedCards.sort((a, b) => a.rating - b.rating);\n    } else if (selectedSortOption === 'AlfaD') {\n      updatedCards.sort((a, b) => a.name.localeCompare(b.name));\n    } else if (selectedSortOption === 'AlfaA') {\n      updatedCards.sort((a, b) => b.name.localeCompare(a.name));\n    }\n    setFilteredCards(updatedCards);\n  }, [cards, selectedSortOption, selectedDataSource, selectedGenres]);\n  useEffect(() => {\n    // 5. Realiza la llamada a la API o la obtención de datos de la base de datos\n    const fetchData = async () => {\n      try {\n        // Código para obtener los datos de la API o de la base de datos\n        // y almacenarlos en el estado \"cards\"\n        setIsLoading(true);\n        const response = await axios.get('API_ENDPOINT');\n        const data = response.data;\n        setCards(data);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error);\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // 6. Agrega una función que maneje el evento de búsqueda\n  const handleSearch = searchTerm => {\n    // Lógica para filtrar las cards según el término de búsqueda\n    const filteredCards = cards.filter(card => card.name.toLowerCase().includes(searchTerm.toLowerCase()));\n    setFilteredCards(filteredCards);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.container,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.cards,\n      children: filteredCards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        id: card.id,\n        name: card.name,\n        genres: card.genres,\n        image: card.image\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(Cards, \"76yYsOuGJ524KfUUB/28alDYyl8=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useState","useEffect","Card","style","axios","Nav","useSelector","useDispatch","getAllVideogames","updateRenderArray","jsxDEV","_jsxDEV","Cards","_s","cards","setCards","filteredCards","setFilteredCards","isLoading","setIsLoading","selectedSortOption","setSelectedSortOption","selectedDataSource","setSelectedDataSource","selectedGenres","setSelectedGenres","updatedCards","filter","card","isDB","length","genres","some","genre","includes","sort","a","b","rating","name","localeCompare","fetchData","response","get","data","error","console","log","handleSearch","searchTerm","toLowerCase","className","container","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","map","id","image","_c","$RefreshReg$"],"sources":["/home/diego/Documentos/henry/PI/videogames/videogames_pi/client/src/components/cards/Cards.jsx"],"sourcesContent":["// import Nav from '../nav/Nav';\n// import Card from '../card/Card';\n// import style from './cards.module.css';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { getAllVideogames, updateRenderArray } from '../../redux/actions';\n\n// const Cards = () => {\n  \n//   const dispatch = useDispatch();\n//   const allVideogamesArray = useSelector(state => state.allVideogamesArray);\n//   const toRenderArray = useSelector(state => state.toRenderArray);\n//   const [searchArray, setSearchArray] = useState([]);\n\n//   useEffect(() => {\n//     dispatch(getAllVideogames());\n//   }, []);\n\n//   const onSearch = async (name) => {\n//     try {\n//       const response = await axios(`http://localhost:3001/videogames/search/?name=${name}`);\n//       const data = response.data;\n//       console.log(data)\n  \n//       if (!data.length) {\n//         window.alert('Try another name!');\n//       } else {\n//         setSearchArray(data);\n//         dispatch(updateRenderArray(data));\n//       }\n//     } catch (error) {\n//       console.error('Error fetching search results:', error);\n//     }\n//   };\n\n//   return (\n//     <main className={style.main}>\n//       <Nav onSearch={onSearch} />\n\n//       <section className={style.cards}>\n//       {(toRenderArray.length ? toRenderArray : allVideogamesArray).map(({ id, name, genres, background_image,image }) => (\n//           <div className={style.card} key={id}>\n//             <Card\n//               id={id}\n//               name={name}\n//               genres={genres}\n//               image={background_image || image}\n//             />\n//           </div>\n//         ))}\n//       </section>\n\n//       <section className={style.paginado}>\n//         <p> ⇤ ← 1 2 3 4 5 → ⇥</p>\n//       </section>\n//     </main>\n//   );\n// };\n\n// export default Cards;\nimport React, { useState, useEffect } from 'react';\nimport Card from '../card/Card';\nimport style from './cards.module.css';\nimport axios from 'axios';\nimport Nav from '../nav/Nav';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllVideogames, updateRenderArray } from '../../redux/actions';\n\nconst Cards = () => {\n  const [cards, setCards] = useState([]);\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // 3. Agrega estados para almacenar las opciones seleccionadas en Nav.jsx\n  const [selectedSortOption, setSelectedSortOption] = useState('');\n  const [selectedDataSource, setSelectedDataSource] = useState('');\n  const [selectedGenres, setSelectedGenres] = useState([]);\n\n  useEffect(() => {\n    // 4. Aplica los filtros y el ordenamiento al arreglo de cards\n    let updatedCards = [...cards];\n\n    // Filtrar por origen\n    if (selectedDataSource === 'API') {\n      updatedCards = updatedCards.filter((card) => !card.isDB);\n    } else if (selectedDataSource === 'DB') {\n      updatedCards = updatedCards.filter((card) => card.isDB);\n    }\n\n    // Filtrar por género\n    if (selectedGenres.length > 0) {\n      updatedCards = updatedCards.filter((card) =>\n        card.genres.some((genre) => selectedGenres.includes(genre))\n      );\n    }\n\n    // Ordenar\n    if (selectedSortOption === 'RatingD') {\n      updatedCards.sort((a, b) => b.rating - a.rating);\n    } else if (selectedSortOption === 'RatingA') {\n      updatedCards.sort((a, b) => a.rating - b.rating);\n    } else if (selectedSortOption === 'AlfaD') {\n      updatedCards.sort((a, b) => a.name.localeCompare(b.name));\n    } else if (selectedSortOption === 'AlfaA') {\n      updatedCards.sort((a, b) => b.name.localeCompare(a.name));\n    }\n\n    setFilteredCards(updatedCards);\n  }, [cards, selectedSortOption, selectedDataSource, selectedGenres]);\n\n  useEffect(() => {\n    // 5. Realiza la llamada a la API o la obtención de datos de la base de datos\n    const fetchData = async () => {\n      try {\n        // Código para obtener los datos de la API o de la base de datos\n        // y almacenarlos en el estado \"cards\"\n        setIsLoading(true);\n        const response = await axios.get('API_ENDPOINT');\n        const data = response.data;\n        setCards(data);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error);\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // 6. Agrega una función que maneje el evento de búsqueda\n  const handleSearch = (searchTerm) => {\n    // Lógica para filtrar las cards según el término de búsqueda\n    const filteredCards = cards.filter((card) =>\n      card.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n    setFilteredCards(filteredCards);\n  };\n\n  return (\n    <div className={style.container}>\n      <Nav onSearch={handleSearch} />\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className={style.cards}>\n          {filteredCards.map((card) => (\n            <Card\n              key={card.id}\n              id={card.id}\n              name={card.name}\n              genres={card.genres}\n              image={card.image}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Cards;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}