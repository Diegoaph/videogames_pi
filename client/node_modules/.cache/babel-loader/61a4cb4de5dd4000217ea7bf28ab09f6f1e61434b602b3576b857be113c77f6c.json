{"ast":null,"code":"var _jsxFileName = \"/home/diego/Documentos/henry/PI/videogames/videogames_pi/client/src/components/cards/Cards.jsx\",\n  _s = $RefreshSig$();\nimport Nav from '../nav/Nav';\nimport Card from '../card/Card';\nimport style from './cards.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { getAllVideogames, updateRenderArray } from '../../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = () => {\n  _s();\n  const dispatch = useDispatch();\n  const allVideogamesArray = useSelector(state => state.allVideogamesArray);\n  const toRenderArray = useSelector(state => state.toRenderArray);\n  const [searchArray, setSearchArray] = useState([]);\n  useEffect(() => {\n    dispatch(getAllVideogames());\n  }, []);\n  const onSearch = async name => {\n    try {\n      const response = await axios(`http://localhost:3001/videogames/search/?name=${name}`);\n      const data = response.data;\n      console.log(data);\n      if (!data.length) {\n        window.alert('Try another name!');\n      } else {\n        setSearchArray(data);\n        dispatch(updateRenderArray(data));\n      }\n    } catch (error) {\n      console.error('Error fetching search results:', error);\n    }\n  };\n  {/************************************************************/}\n  const handleGenresChange = event => {\n    console.log(event);\n  };\n  {/************************************************************/}\n  handleSelectedSortOptionChange = event => {\n    console.log(event);\n  };\n  {/************************************************************/}\n  handleDataSourceChange = event => {\n    console.log(event);\n  };\n  {/************************************************************/}\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: style.main,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: style.cards,\n      children: (toRenderArray.length ? toRenderArray : allVideogamesArray).map(_ref => {\n        let {\n          id,\n          name,\n          genres,\n          background_image,\n          image\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.card,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            id: id,\n            name: name,\n            genres: genres,\n            image: background_image || image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: style.paginado,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" \\u21E4 \\u2190 1 2 3 4 5 \\u2192 \\u21E5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Cards, \"TVZ+UgEbhQ9KoXRK+1pQmgFWPlM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Cards;\nexport default Cards;\n// import React, { useState, useEffect } from 'react';\n// import Card from '../card/Card';\n// import style from './cards.module.css';\n// import axios from 'axios';\n// import Nav from '../nav/Nav';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { getAllVideogames, updateRenderArray } from '../../redux/actions';\n\n// const Cards = () => {\n//   const [cards, setCards] = useState([]);\n//   const [filteredCards, setFilteredCards] = useState([]);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   // 3. Agrega estados para almacenar las opciones seleccionadas en Nav.jsx\n//   const [selectedSortOption, setSelectedSortOption] = useState('');\n//   const [selectedDataSource, setSelectedDataSource] = useState('');\n//   const [selectedGenres, setSelectedGenres] = useState([]);\n\n//   useEffect(() => {\n//     // 4. Aplica los filtros y el ordenamiento al arreglo de cards\n//     let updatedCards = [...cards];\n\n//     // Filtrar por origen\n//     if (selectedDataSource === 'API') {\n//       updatedCards = updatedCards.filter((card) => !card.isDB);\n//     } else if (selectedDataSource === 'DB') {\n//       updatedCards = updatedCards.filter((card) => card.isDB);\n//     }\n\n//     // Filtrar por género\n//     if (selectedGenres.length > 0) {\n//       updatedCards = updatedCards.filter((card) =>\n//         card.genres.some((genre) => selectedGenres.includes(genre))\n//       );\n//     }\n\n//     // Ordenar\n//     if (selectedSortOption === 'RatingD') {\n//       updatedCards.sort((a, b) => b.rating - a.rating);\n//     } else if (selectedSortOption === 'RatingA') {\n//       updatedCards.sort((a, b) => a.rating - b.rating);\n//     } else if (selectedSortOption === 'AlfaD') {\n//       updatedCards.sort((a, b) => a.name.localeCompare(b.name));\n//     } else if (selectedSortOption === 'AlfaA') {\n//       updatedCards.sort((a, b) => b.name.localeCompare(a.name));\n//     }\n\n//     setFilteredCards(updatedCards);\n//   }, [cards, selectedSortOption, selectedDataSource, selectedGenres]);\n\n//   useEffect(() => {\n//     // 5. Realiza la llamada a la API o la obtención de datos de la base de datos\n//     const fetchData = async () => {\n//       try {\n//         // Código para obtener los datos de la API o de la base de datos\n//         // y almacenarlos en el estado \"cards\"\n//         setIsLoading(true);\n//         const response = await axios.get('API_ENDPOINT');\n//         const data = response.data;\n//         setCards(data);\n//         setIsLoading(false);\n//       } catch (error) {\n//         console.log(error);\n//         setIsLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // 6. Agrega una función que maneje el evento de búsqueda\n//   const handleSearch = (searchTerm) => {\n//     // Lógica para filtrar las cards según el término de búsqueda\n//     const filteredCards = cards.filter((card) =>\n//       card.name.toLowerCase().includes(searchTerm.toLowerCase())\n//     );\n//     setFilteredCards(filteredCards);\n//   };\n\n//   return (\n//     <div className={style.container}>\n//       <Nav onSearch={handleSearch} />\n//       {isLoading ? (\n//         <p>Loading...</p>\n//       ) : (\n//         <div className={style.cards}>\n//           {filteredCards.map((card) => (\n//             <Card\n//               key={card.id}\n//               id={card.id}\n//               name={card.name}\n//               genres={card.genres}\n//               image={card.image}\n//             />\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["Nav","Card","style","useSelector","useDispatch","useEffect","useState","axios","getAllVideogames","updateRenderArray","jsxDEV","_jsxDEV","Cards","_s","dispatch","allVideogamesArray","state","toRenderArray","searchArray","setSearchArray","onSearch","name","response","data","console","log","length","window","alert","error","handleGenresChange","event","handleSelectedSortOptionChange","handleDataSourceChange","className","main","children","fileName","_jsxFileName","lineNumber","columnNumber","cards","map","_ref","id","genres","background_image","image","card","paginado","_c","$RefreshReg$"],"sources":["/home/diego/Documentos/henry/PI/videogames/videogames_pi/client/src/components/cards/Cards.jsx"],"sourcesContent":["import Nav from '../nav/Nav';\nimport Card from '../card/Card';\nimport style from './cards.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { getAllVideogames, updateRenderArray } from '../../redux/actions';\n\nconst Cards = () => {\n  \n  const dispatch = useDispatch();\n  const allVideogamesArray = useSelector(state => state.allVideogamesArray);\n  const toRenderArray = useSelector(state => state.toRenderArray);\n  const [searchArray, setSearchArray] = useState([]);\n\n  useEffect(() => {\n    dispatch(getAllVideogames());\n  }, []);\n\n  const onSearch = async (name) => {\n    try {\n      const response = await axios(`http://localhost:3001/videogames/search/?name=${name}`);\n      const data = response.data;\n      console.log(data)\n  \n      if (!data.length) {\n        window.alert('Try another name!');\n      } else {\n        setSearchArray(data);\n        dispatch(updateRenderArray(data));\n      }\n    } catch (error) {\n      console.error('Error fetching search results:', error);\n    }\n  };\n\n{/************************************************************/}\nconst handleGenresChange=(event)=>{\n  console.log(event)\n}\n\n\n{/************************************************************/}\nhandleSelectedSortOptionChange=(event)=>{\n  console.log(event)\n}\n\n\n\n{/************************************************************/}\nhandleDataSourceChange=(event)=>{\n  console.log(event)\n}\n\n\n\n{/************************************************************/}\n\n  return (\n    <main className={style.main}>\n      <Nav onSearch={onSearch} />\n\n      <section className={style.cards}>\n      {(toRenderArray.length ? toRenderArray : allVideogamesArray).map(({ id, name, genres, background_image,image }) => (\n          <div className={style.card} key={id}>\n            <Card\n              id={id}\n              name={name}\n              genres={genres}\n              image={background_image || image}\n            />\n          </div>\n        ))}\n      </section>\n\n      <section className={style.paginado}>\n        <p> ⇤ ← 1 2 3 4 5 → ⇥</p>\n      </section>\n    </main>\n  );\n};\n\nexport default Cards;\n// import React, { useState, useEffect } from 'react';\n// import Card from '../card/Card';\n// import style from './cards.module.css';\n// import axios from 'axios';\n// import Nav from '../nav/Nav';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { getAllVideogames, updateRenderArray } from '../../redux/actions';\n\n// const Cards = () => {\n//   const [cards, setCards] = useState([]);\n//   const [filteredCards, setFilteredCards] = useState([]);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   // 3. Agrega estados para almacenar las opciones seleccionadas en Nav.jsx\n//   const [selectedSortOption, setSelectedSortOption] = useState('');\n//   const [selectedDataSource, setSelectedDataSource] = useState('');\n//   const [selectedGenres, setSelectedGenres] = useState([]);\n\n//   useEffect(() => {\n//     // 4. Aplica los filtros y el ordenamiento al arreglo de cards\n//     let updatedCards = [...cards];\n\n//     // Filtrar por origen\n//     if (selectedDataSource === 'API') {\n//       updatedCards = updatedCards.filter((card) => !card.isDB);\n//     } else if (selectedDataSource === 'DB') {\n//       updatedCards = updatedCards.filter((card) => card.isDB);\n//     }\n\n//     // Filtrar por género\n//     if (selectedGenres.length > 0) {\n//       updatedCards = updatedCards.filter((card) =>\n//         card.genres.some((genre) => selectedGenres.includes(genre))\n//       );\n//     }\n\n//     // Ordenar\n//     if (selectedSortOption === 'RatingD') {\n//       updatedCards.sort((a, b) => b.rating - a.rating);\n//     } else if (selectedSortOption === 'RatingA') {\n//       updatedCards.sort((a, b) => a.rating - b.rating);\n//     } else if (selectedSortOption === 'AlfaD') {\n//       updatedCards.sort((a, b) => a.name.localeCompare(b.name));\n//     } else if (selectedSortOption === 'AlfaA') {\n//       updatedCards.sort((a, b) => b.name.localeCompare(a.name));\n//     }\n\n//     setFilteredCards(updatedCards);\n//   }, [cards, selectedSortOption, selectedDataSource, selectedGenres]);\n\n//   useEffect(() => {\n//     // 5. Realiza la llamada a la API o la obtención de datos de la base de datos\n//     const fetchData = async () => {\n//       try {\n//         // Código para obtener los datos de la API o de la base de datos\n//         // y almacenarlos en el estado \"cards\"\n//         setIsLoading(true);\n//         const response = await axios.get('API_ENDPOINT');\n//         const data = response.data;\n//         setCards(data);\n//         setIsLoading(false);\n//       } catch (error) {\n//         console.log(error);\n//         setIsLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // 6. Agrega una función que maneje el evento de búsqueda\n//   const handleSearch = (searchTerm) => {\n//     // Lógica para filtrar las cards según el término de búsqueda\n//     const filteredCards = cards.filter((card) =>\n//       card.name.toLowerCase().includes(searchTerm.toLowerCase())\n//     );\n//     setFilteredCards(filteredCards);\n//   };\n\n//   return (\n//     <div className={style.container}>\n//       <Nav onSearch={handleSearch} />\n//       {isLoading ? (\n//         <p>Loading...</p>\n//       ) : (\n//         <div className={style.cards}>\n//           {filteredCards.map((card) => (\n//             <Card\n//               key={card.id}\n//               id={card.id}\n//               name={card.name}\n//               genres={card.genres}\n//               image={card.image}\n//             />\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Cards;\n"],"mappings":"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IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEX,CAAC;AAAC3B,EAAA,CAxEID,KAAK;EAAA,QAEQR,WAAW,EACDD,WAAW,EAChBA,WAAW;AAAA;AAAA+C,EAAA,GAJ7BtC,KAAK;AA0EX,eAAeA,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}