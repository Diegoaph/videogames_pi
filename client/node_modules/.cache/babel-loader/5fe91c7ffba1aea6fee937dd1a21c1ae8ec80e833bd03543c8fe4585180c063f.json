{"ast":null,"code":"var _jsxFileName = \"/home/diego/Documentos/henry/PI/videogames/videogames_pi/client/src/components/cards/Cards.jsx\",\n  _s = $RefreshSig$();\n// import Nav from '../nav/Nav';\n// import Card from '../card/Card';\n// import style from './cards.module.css';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { getAllVideogames, updateRenderArray } from '../../redux/actions';\n\n// const Cards = () => {\n\n//   const dispatch = useDispatch();\n//   const allVideogamesArray = useSelector(state => state.allVideogamesArray);\n//   const toRenderArray = useSelector(state => state.toRenderArray);\n\n//   useEffect(() => {\n//     dispatch(getAllVideogames()).then(() => {\n//       dispatch(updateRenderArray(allVideogamesArray));\n//     });\n//   }, []);\n\n// const [selectedGenre, setSelectedGenre] = useState('');\n// const [selectedSource, setSelectedSource] = useState('');\n// const [selectedSort, setSelectedSort] = useState('');\n// const [finalRender, setFinalRender] = useState([]);\n\n// {/***********************************************/}\n// const onSearch = async (name) => {\n//   try {\n\n//     const response = await axios(`http://localhost:3001/videogames/search/?name=${name}`);\n//     const data = response.data;\n\n//       if (!data.length) {\n//         window.alert('Try another name!');\n//       } else {\n//         dispatch(updateRenderArray(data));\n//         setFinalRender(data)\n//       }\n//     } catch (error) {\n//       console.error('Error fetching search results:', error);\n//     }\n//   };\n\n// {/***********************************************/}\n//   const handleGenresChange=(event)=>{\n//     setSelectedGenre(event.target.value);\n//     }\n// {/***********************************************/}\n//   const handleSelectedSortOptionChange=(event)=>{\n//     setSelectedSort(event.target.value);\n//   }\n// {/***********************************************/}\n//   const handleDataSourceChange=(event)=>{\n//     setSelectedSource(event.target.value);\n//   }\n// {/***********************************************/}\n\n//   if (selectedGenre!=='all') {\n//     dispatch(updateRenderArray(finalRender.filter(game => game.genre === selectedGenre)))\n//   }\n\n//   if (selectedSource === 'DB') \n//   {\n//     dispatch(updateRenderArray(finalRender.filter(game => game.id.includes('-'))))\n//   }else if (selectedSource === 'API') \n//   {\n//     dispatch(updateRenderArray(finalRender.filter(game => !game.id.includes('-'))))\n//   }\n\n//   if (selectedSort === 'alfaD') {\n//     dispatch(updateRenderArray(finalRender.sort((a, b) => a.name.localeCompare(b.name))));\n//   } else if (selectedSort === 'alfaA') {\n//     dispatch(updateRenderArray(finalRender.sort((a, b) => b.name.localeCompare(a.name))));\n//   } else if (selectedSort === 'ratingA') {\n//     dispatch(updateRenderArray(finalRender.sort((a, b) => a.rating - b.rating)));\n//   } else if (selectedSort === 'ratingD') {\n//     dispatch(updateRenderArray(finalRender.sort((a, b) => b.rating - a.rating)));\n//   }\n\n// {/***********************************************/}\n\n//   return (\n//     <main className={style.main}>\n//       <Nav handleGenresChange={handleGenresChange} handleSelectedSortOptionChange={handleSelectedSortOptionChange} handleDataSourceChange={handleDataSourceChange} onSearch={onSearch} />\n\n//       <section className={style.cards}>\n//       {(toRenderArray).map(\n//         ({ id, name, genres, background_image,image }) => (\n//           <div className={style.card} key={id}>\n//             <Card\n//               id={id}\n//               name={name}\n//               genres={genres}\n//               image={background_image || image}\n//             />\n//           </div>\n//         ))}\n//       </section>\n\n//       <section className={style.paginado}>\n//         <p> ⇤ ← 1 2 3 4 5 → ⇥</p>\n//       </section>\n//     </main>\n//   );\n// };\n\n// export default Cards;\n\nimport Nav from '../nav/Nav';\nimport Card from '../card/Card';\nimport style from './cards.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { getAllVideogames, updateRenderArray } from '../../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = () => {\n  _s();\n  const dispatch = useDispatch();\n  const allVideogamesArray = useSelector(state => state.allVideogamesArray);\n  const toRenderArray = useSelector(state => state.toRenderArray);\n  useEffect(() => {\n    dispatch(getAllVideogames()).then(() => {\n      dispatch(updateRenderArray(allVideogamesArray));\n    });\n  }, []);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [selectedSource, setSelectedSource] = useState('');\n  const [selectedSort, setSelectedSort] = useState('');\n  const [finalRender, setFinalRender] = useState([]);\n  const handleGenresChange = event => {\n    setSelectedGenre(event.target.value);\n  };\n  const handleSelectedSortOptionChange = event => {\n    setSelectedSort(event.target.value);\n  };\n  const handleDataSourceChange = event => {\n    setSelectedSource(event.target.value);\n  };\n  const onSearch = async name => {\n    try {\n      const response = await axios.get(`http://localhost:3001/videogames/search/?name=${name}`);\n      const data = response.data;\n      if (!data.length) {\n        window.alert('Try another name!');\n      } else {\n        dispatch(updateRenderArray(data));\n        setFinalRender(data);\n      }\n    } catch (error) {\n      console.error('Error fetching search results:', error);\n    }\n  };\n\n  // Filtrar y ordenar los juegos cuando cambien los filtros o el ordenamiento\n  useEffect(() => {\n    let filteredGames = [...toRenderArray];\n\n    // Filtrar por género\n    if (selectedGenre) {\n      filteredGames = filteredGames.filter(game => game.genres.some(genre => genre.name === selectedGenre));\n    }\n\n    // Filtrar por proveniencia (source)\n    if (selectedSource) {\n      filteredGames = filteredGames.filter(game => {\n        if (selectedSource === 'all') {\n          return true;\n        } else if (selectedSource === 'API') {\n          return !game.id.includes('-'); // Verificar si el ID contiene guiones para determinar si proviene de la API\n        } else if (selectedSource === 'DB') {\n          return game.id.includes('-'); // Verificar si el ID contiene guiones para determinar si proviene de la base de datos\n        }\n      });\n    }\n\n    // Ordenar los juegos\n    if (selectedSort === 'AlfaD') {\n      filteredGames.sort((a, b) => a.name.localeCompare(b.name));\n    } else if (selectedSort === 'AlfaA') {\n      filteredGames.sort((a, b) => b.name.localeCompare(a.name));\n    } else if (selectedSort === 'RatingD') {\n      filteredGames.sort((a, b) => b.rating - a.rating);\n    } else if (selectedSort === 'RatingA') {\n      filteredGames.sort((a, b) => a.rating - b.rating);\n    }\n    setFinalRender(filteredGames); // Actualizar el estado local con los juegos filtrados y ordenados\n  }, [selectedGenre, selectedSource, selectedSort, toRenderArray]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: style.main,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      handleGenresChange: handleGenresChange,\n      handleSelectedSortOptionChange: handleSelectedSortOptionChange,\n      handleDataSourceChange: handleDataSourceChange,\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: style.cards,\n      children: finalRender.length > 0 ? finalRender.map(_ref => {\n        let {\n          id,\n          name,\n          genres,\n          background_image,\n          image\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.card,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            id: id,\n            name: name,\n            genres: genres,\n            image: background_image || image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 7\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 5\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No games found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: style.paginado,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" \\u21E4 \\u2190 1 2 3 4 5 \\u2192 \\u21E5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(Cards, \"oOrAfueo/Et8uoPXgi0Rh4/c58E=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["Nav","Card","style","useSelector","useDispatch","useEffect","useState","axios","getAllVideogames","updateRenderArray","jsxDEV","_jsxDEV","Cards","_s","dispatch","allVideogamesArray","state","toRenderArray","then","selectedGenre","setSelectedGenre","selectedSource","setSelectedSource","selectedSort","setSelectedSort","finalRender","setFinalRender","handleGenresChange","event","target","value","handleSelectedSortOptionChange","handleDataSourceChange","onSearch","name","response","get","data","length","window","alert","error","console","filteredGames","filter","game","genres","some","genre","id","includes","sort","a","b","localeCompare","rating","className","main","children","fileName","_jsxFileName","lineNumber","columnNumber","cards","map","_ref","background_image","image","card","paginado","_c","$RefreshReg$"],"sources":["/home/diego/Documentos/henry/PI/videogames/videogames_pi/client/src/components/cards/Cards.jsx"],"sourcesContent":["// import Nav from '../nav/Nav';\n// import Card from '../card/Card';\n// import style from './cards.module.css';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { getAllVideogames, updateRenderArray } from '../../redux/actions';\n\n// const Cards = () => {\n  \n//   const dispatch = useDispatch();\n//   const allVideogamesArray = useSelector(state => state.allVideogamesArray);\n//   const toRenderArray = useSelector(state => state.toRenderArray);\n  \n//   useEffect(() => {\n//     dispatch(getAllVideogames()).then(() => {\n//       dispatch(updateRenderArray(allVideogamesArray));\n//     });\n//   }, []);\n\n\n// const [selectedGenre, setSelectedGenre] = useState('');\n// const [selectedSource, setSelectedSource] = useState('');\n// const [selectedSort, setSelectedSort] = useState('');\n// const [finalRender, setFinalRender] = useState([]);\n\n// {/***********************************************/}\n// const onSearch = async (name) => {\n//   try {\n    \n//     const response = await axios(`http://localhost:3001/videogames/search/?name=${name}`);\n//     const data = response.data;\n      \n//       if (!data.length) {\n//         window.alert('Try another name!');\n//       } else {\n//         dispatch(updateRenderArray(data));\n//         setFinalRender(data)\n//       }\n//     } catch (error) {\n//       console.error('Error fetching search results:', error);\n//     }\n//   };\n\n// {/***********************************************/}\n//   const handleGenresChange=(event)=>{\n//     setSelectedGenre(event.target.value);\n//     }\n// {/***********************************************/}\n//   const handleSelectedSortOptionChange=(event)=>{\n//     setSelectedSort(event.target.value);\n//   }\n// {/***********************************************/}\n//   const handleDataSourceChange=(event)=>{\n//     setSelectedSource(event.target.value);\n//   }\n// {/***********************************************/}\n\n  \n  \n//   if (selectedGenre!=='all') {\n//     dispatch(updateRenderArray(finalRender.filter(game => game.genre === selectedGenre)))\n//   }\n\n\n//   if (selectedSource === 'DB') \n//   {\n//     dispatch(updateRenderArray(finalRender.filter(game => game.id.includes('-'))))\n//   }else if (selectedSource === 'API') \n//   {\n//     dispatch(updateRenderArray(finalRender.filter(game => !game.id.includes('-'))))\n//   }\n\n    \n//   if (selectedSort === 'alfaD') {\n//     dispatch(updateRenderArray(finalRender.sort((a, b) => a.name.localeCompare(b.name))));\n//   } else if (selectedSort === 'alfaA') {\n//     dispatch(updateRenderArray(finalRender.sort((a, b) => b.name.localeCompare(a.name))));\n//   } else if (selectedSort === 'ratingA') {\n//     dispatch(updateRenderArray(finalRender.sort((a, b) => a.rating - b.rating)));\n//   } else if (selectedSort === 'ratingD') {\n//     dispatch(updateRenderArray(finalRender.sort((a, b) => b.rating - a.rating)));\n//   }\n  \n\n// {/***********************************************/}\n\n\n//   return (\n//     <main className={style.main}>\n//       <Nav handleGenresChange={handleGenresChange} handleSelectedSortOptionChange={handleSelectedSortOptionChange} handleDataSourceChange={handleDataSourceChange} onSearch={onSearch} />\n\n//       <section className={style.cards}>\n//       {(toRenderArray).map(\n//         ({ id, name, genres, background_image,image }) => (\n//           <div className={style.card} key={id}>\n//             <Card\n//               id={id}\n//               name={name}\n//               genres={genres}\n//               image={background_image || image}\n//             />\n//           </div>\n//         ))}\n//       </section>\n\n//       <section className={style.paginado}>\n//         <p> ⇤ ← 1 2 3 4 5 → ⇥</p>\n//       </section>\n//     </main>\n//   );\n// };\n\n// export default Cards;\n\nimport Nav from '../nav/Nav';\nimport Card from '../card/Card';\nimport style from './cards.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { getAllVideogames, updateRenderArray } from '../../redux/actions';\n\nconst Cards = () => {\n  const dispatch = useDispatch();\n  const allVideogamesArray = useSelector(state => state.allVideogamesArray);\n  const toRenderArray = useSelector(state => state.toRenderArray);\n\n  useEffect(() => {\n    dispatch(getAllVideogames()).then(() => {\n      dispatch(updateRenderArray(allVideogamesArray));\n    });\n  }, []);\n\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [selectedSource, setSelectedSource] = useState('');\n  const [selectedSort, setSelectedSort] = useState('');\n  const [finalRender, setFinalRender] = useState([]);\n\n  const handleGenresChange = event => {\n    setSelectedGenre(event.target.value);\n  };\n\n  const handleSelectedSortOptionChange = event => {\n    setSelectedSort(event.target.value);\n  };\n\n  const handleDataSourceChange = event => {\n    setSelectedSource(event.target.value);\n  };\n\n  const onSearch = async name => {\n    try {\n      const response = await axios.get(`http://localhost:3001/videogames/search/?name=${name}`);\n      const data = response.data;\n\n      if (!data.length) {\n        window.alert('Try another name!');\n      } else {\n        dispatch(updateRenderArray(data));\n        setFinalRender(data);\n      }\n    } catch (error) {\n      console.error('Error fetching search results:', error);\n    }\n  };\n\n  // Filtrar y ordenar los juegos cuando cambien los filtros o el ordenamiento\n  useEffect(() => {\n    let filteredGames = [...toRenderArray];\n\n    // Filtrar por género\n    if (selectedGenre) {\n      filteredGames = filteredGames.filter(game => game.genres.some(genre => genre.name === selectedGenre));\n    }\n\n    // Filtrar por proveniencia (source)\n    if (selectedSource) {\n      filteredGames = filteredGames.filter(game => {\n        if (selectedSource === 'all') {\n          return true;\n        } else if (selectedSource === 'API') {\n          return !game.id.includes('-'); // Verificar si el ID contiene guiones para determinar si proviene de la API\n        } else if (selectedSource === 'DB') {\n          return game.id.includes('-'); // Verificar si el ID contiene guiones para determinar si proviene de la base de datos\n        }\n      });\n    }\n\n    // Ordenar los juegos\n    if (selectedSort === 'AlfaD') {\n      filteredGames.sort((a, b) => a.name.localeCompare(b.name));\n    } else if (selectedSort === 'AlfaA') {\n      filteredGames.sort((a, b) => b.name.localeCompare(a.name));\n    } else if (selectedSort === 'RatingD') {\n      filteredGames.sort((a, b) => b.rating - a.rating);\n    } else if (selectedSort === 'RatingA') {\n      filteredGames.sort((a, b) => a.rating - b.rating);\n    }\n\n    setFinalRender(filteredGames); // Actualizar el estado local con los juegos filtrados y ordenados\n  }, [selectedGenre, selectedSource, selectedSort, toRenderArray]);\n\n  return (\n    <main className={style.main}>\n      <Nav\n        handleGenresChange={handleGenresChange}\n        handleSelectedSortOptionChange={handleSelectedSortOptionChange}\n        handleDataSourceChange={handleDataSourceChange}\n        onSearch={onSearch}\n      />\n\n      <section className={style.cards}>\n      {finalRender.length > 0 ? (\n  finalRender.map(({ id, name, genres, background_image, image }) => (\n    <div className={style.card} key={id}>\n      <Card id={id} name={name} genres={genres} image={background_image || image} />\n    </div>\n  ))\n) : (\n  <p>No games found.</p>\n)}\n\n      </section>\n\n      <section className={style.paginado}>\n        <p> ⇤ ← 1 2 3 4 5 → ⇥</p>\n      </section>\n    </main>\n  );\n};\n\nexport default Cards;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}